Subject Description Form 
 
Subject Code  COMP3011 
Subject Title  Design and Analysis of Algorithms 
Credit Value  3 
Level  3 
Pre-requisite /  Pre-requisite: COMP2011 Data Structures or EIE3320 Object-Oriented Design and 
Co-requisite /  Programming or equivalent 
Exclusion 
Objectives  The objectives of this subject are to: 
•  provide students with in-depth knowledge on algorithm design techniques; and 
•  introduce and practice advanced algorithms for various data types. 
Intended  Upon completion of the subject, students will be able to: 
Learning 
Outcomes  Professional/academic knowledge and skills 
(a)  understand advanced techniques for designing algorithms; 
(b)  design algorithms for solving computing problems efficiently; 
(c)  analyze and compare the efficiency of algorithms; and 
(d)  design and implement efficient algorithms for solving computing problems in 
a high-level programming language (e.g., C++ or Java). 
Attributes for all-roundedness 
(e)  solve problems independently; and 
(f)  think critically for improvement in solutions. 
 
Subject 
Duration of 
Synopsis/  Topic 
Lectures 
Indicative 
Syllabus  1.  Analysis of algorithms 
Mathematical  techniques;  big-O  notation;  efficiency  2 
analysis; recurring relations. 
2.  Advanced Algorithmic Design Techniques 
Dynamic programming, divide-and-conquer, branch-and- 6 
bound, greedy algorithm. 
3.  Advanced Analysis Techniques 
Introduction  to  randomized  algorithms,  probabilistic  6 
analysis, amortized analysis. 
Dec 2020 4.  Advanced Data Structures 
Cache-oblivious data structures, log-structured merge tree,  4 
locality sensitive hashing, Bloom filter. 
5.  Computational Geometry Algorithms 
Spatial  range  searching,  indexing  of  spatial  objects,  4 
convex hull, closest pairs 
6.  NP-Complete Problems 
Complexity  classes,  NP-completeness,  reduction,  4 
approximation algorithms. 
Total  26 
 
Teaching/  Lectures  provide  students  the  main  concepts  of  the  topic,  together  with 
Learning  comprehensive examples for easy understanding. 
Methodology 
Tutorials and lab sessions offer an opportunity to students for practicing their 
algorithmic analysis, design, and implementation techniques.  
Both written and programming assignments will be utilized in the course. Written 
assignments help students develop analysis and design skills, whereas programming 
assignments emphasize on implementation skills. 
 
Assessment 
Specific assessment  %  Intended subject learning outcomes to be 
Methods in 
methods/tasks  weighting  assessed (Please tick as appropriate) 
Alignment with 
Intended 
a  b  c  d  e  f 
Learning 
Outcomes 
Continuous             
Assessment 
1. Assignments  ✓  ✓  ✓  ✓  ✓   
60% 
2. Lab Exercises  ✓  ✓  ✓  ✓  ✓   
3. Mid-Term / Tests  ✓  ✓  ✓    ✓  ✓ 
Examination  40%  ✓  ✓  ✓    ✓  ✓ 
Total   100%   
Explanation of the appropriateness of the assessment methods in assessing the 
intended learning outcomes: 
All four items are relevant to the assessment of the use of algorithms advanced data 
structures for problem solving, as well as their efficiency analysis (for items a, b, c). 
In addition, programming exercises in assignments and lab sessions are used to 
assess implementation skills (for item d); whereas the mid-term / tests and the 
examination are used to assess independent problem solving and critical thinking 
skills (for items e, f). 
Dec 2020 Student Study  Class contact: 
Effort Expected  
▪  Lecture  26 Hrs. 
▪  Tutorial/Lab  13 Hrs. 
Other student study effort: 
▪  Assignments (Written and Programming)  65 Hrs. 
Total student study effort   104 Hrs. 
Reading List  Textbook: 
and References 
1.  Cormen, Thomas H.,  Leiserson, Charles E., Rivest, Ronald  L. and Stein, 
Clifford, Introduction to Algorithms, 3rd Edition, MIT Press, 2009. 
Reference Books: 
1.  Goodrich, M.T., and Tamassia, R., Data Structures and Algorithms in Java, 3rd 
Edition, John Wiley, 2005.  
2.  Carrano, Frank M., Data Abstraction & Problem Solving with C++: Walls & 
Mirrors, Addison Wesley, 2007. 
 
Dec 2020 